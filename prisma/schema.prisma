// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  email        String     @unique
  username     String     @unique
  fullName     String?
  avatarUrl    String?
  passwordHash String
  // role       Role       @default(USER)
  upvotes      Feedback[] @relation(references: [id])
  Comment      Comment[]
  Feedback     Feedback[] @relation("author")
}

model Category {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  name      String     @unique
  feedbacks Feedback[]
}

model Feedback {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  user        User      @relation("author", fields: [userId], references: [id])
  userId      String
  title       String
  description String
  slug        String    @unique
  status      String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  comments    Comment[]
  upvotes     User[]
}

// model Upvotes {
//   feedback   Feedback @relation(fields: [feedbackId], references: [id])
//   feedbackId String // relation scalar field (used in the `@relation` attribute above)
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String // relation scalar field (used in the `@relation` attribute above)
//   assignedAt DateTime @default(now())
//   assignedBy String

//   @@id([feedbackId, userId])
// }

model Comment {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  content    String
  author     User      @relation(fields: [userId], references: [id])
  feedback   Feedback  @relation(fields: [feedbackId], references: [id])
  userId     String
  feedbackId String
  replies    Comment[] @relation("replies")
  parent     Comment?  @relation("replies", fields: [parentId], references: [id])
  parentId   String?   @map("commentId")
}
